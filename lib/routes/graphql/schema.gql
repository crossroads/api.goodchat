type Query {
  goodchatProfile: Staff!
  conversations(limit: Int, after: Int, type: ConversationType, tagIds: [Int!]): [Conversation!]!
  conversation(id: Int!): Conversation
  customers(
    limit: Int,
    after: Int,
    externalId: [String!],
    id: [Int!]
  ): [Customer!]!
}

type Subscription {
  messageEvent(conversationId: Int, actions: [SubscriptionAction]): MessageEvent!
  readReceiptEvent(conversationId: Int!): ReadReceiptEvent!
  conversationEvent(conversationId: Int, type: ConversationType): ConversationEvent!
}

type Mutation {
  # TODO: Mutations
  #   - JoinConversation(conversation)
  #   - AddToConversation(user, conversation)
  #   - LeaveConversation(conversation)
  #   - sendImage
  #   - sendLocation
  #   - sendLink
  #   - sendXXX

  sendMessage(
    conversationId: Int!,
    text: String!,
    timestamp: DateTime,
    metadata: JSON
  ) : Message!

  startTyping(conversationId: Int!) : Conversation!

  stopTyping(conversationId: Int!) : Conversation!

  markAsRead(conversationId: Int!) : ReadReceipt!

  createConversation(
    type: ConversationType!,
    memberIds: [Int!]!,
    metadata: JSON
  ) : Conversation!

  tagConversation(conversationId: Int!, tagId: Int!) : Conversation!

  untagConversation(conversationId: Int!, tagId: Int!) : Conversation!
}

enum ConversationType {
  CUSTOMER
  PRIVATE
  PUBLIC
}

enum SubscriptionAction {
  CREATE
  UPDATE
  DELETE
}

enum DeliveryStatus {
  UNSENT
  SENT
  DELIVERED
  FAILED
}

type ReadReceipt {
  id: Int!
  userId: Int!
  userType: String!
  conversationId: Int!
  conversation: Conversation!
  lastReadMessageId: Int!
  lastReadMessage: Message!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tag {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Conversation {
  id: Int!
  customerId: Int
  customer: Customer
  source: String!
  type: ConversationType!
  metadata: JSON!
  createdAt: DateTime!
  updatedAt: DateTime!
  messages(limit: Int, after: Int): [Message!]!
  readReceipts: [ReadReceipt!]!
  staffs: [Staff!]!
  tags: [Tag!]!
  _computed: ConversationAggregates!
}

type ConversationAggregates {
  conversationId: Int!
  unreadMessageCount: Int!
  totalMessageCount: Int!
}

type Message {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  conversationId: Int!
  conversation: Conversation!
  authorType: String!
  authorId: Int!
  content: JSON!
  metadata: JSON!
  customerDeliveryStatus: DeliveryStatus!
  customerDeliveryError: String
}

type MessageEvent {
  action: SubscriptionAction!
  message: Message!
}

type ReadReceiptEvent {
  action: SubscriptionAction!
  readReceipt: ReadReceipt!
}

type ConversationEvent {
  action: SubscriptionAction!
  conversation: Conversation!
}

type Customer {
  id: Int!
  externalId: String
  createdAt: DateTime!
  displayName: String!
  email: String
  avatarUrl: String
  locale: String!
  metadata: JSON!
  conversations: [Conversation!]!
}

type Staff {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  externalId: String
  displayName: String!
  metadata: JSON!
  permissions: [String!]!,
  conversations: [Conversation!]!
}
